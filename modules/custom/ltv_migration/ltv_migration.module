<?php

/**
 * @file
 * Module file for LTV migration.
 */

/**
 * Implements hook_menu().
 */
function ltv_migration_menu() {
  $items['admin/config/ltv_migration'] = array(
    'title' => 'Shows Gallery Migration',
    'description' => 'Migration module to import content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ltv_migration_gallery_import'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ltv_migration.admin.inc',
  );

  $items['admin/config/ltv_migration/shows_gallery_import'] = array(
    'title' => 'Shows Gallery Import',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['movies'] = array(
	  'title' => 'Movies',
  	'page callback' => 'ltv_migration_text',
    'page arguments' => array(1),
	  'access arguments' => array('access content'),
   	'type' => MENU_NORMAL_ITEM,
  );

  $items['movies/movies-index'] = array(
	  'title' => 'Movies',
  	'page callback' => 'ltv_migration_text',
	  'access arguments' => array('access content'),
   	'type' => MENU_NORMAL_ITEM,
  );
  $items['movies/lifetime-movie-network'] = array(
	  'title' => 'Lifetime Movie Network Movies',
  	'page callback' => 'ltv_migration_text',
	  'access arguments' => array('access content'),
   	'type' => MENU_CALLBACK,
  );

  return $items;
}

function ltv_migration_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($entity_type == 'node') {
    $targets['commerce_product_field'] = array(
      'name' => t('Commerce product field'),
      'description' => t('Description Commerce Product field.'),
      'callback' => 'ltv_migration_commerce_product_callback',
    );
  }
}

function ltv_migration_commerce_product_callback($source, $entity, $target, $value, $mapping) {
	global $user;
  $value_parts = explode('|', $value);
	$product_fields = array();
	foreach($value_parts as $field_data) {
		$field_data_parts = explode(';', $field_data);
		$product_fields[$field_data_parts[0]] = $field_data_parts[1];
	}

	$product = commerce_product_new('product');
	$product->uid = $user->uid;
	$product->sku = $product_fields['productsku'];
	$product->title = $product_fields['producttitle'];
	$product->language = LANGUAGE_NONE;
	$product->commerce_price = array(LANGUAGE_NONE => array( 0 => array(
	 'amount' => $product['price'],
	 'currency_code' => commerce_default_currency(),
	)));

	$cp->my_field[LANGUAGE_NONE][0]['value'] = 22;
	commerce_product_save($cp);

}

/**
 * Implements hook_views_query_alter().
 */
function ltv_migration_views_query_alter(&$view, &$query) {
  if ($view->name == 'article_test') {
    dsm($query);
  }
}
function ltv_migration_text() {
	if (!(arg(0) == 'movies' && (arg(1) == '' || arg(1) == 'movies-index'))) {
		drupal_not_found();
	}

  return "working";
}

function ltv_migration_feeds_before_import(FeedsSource $source) {
	// Get import source.
	$result = $source->importer->fetcher->fetch($source);
	$result = $source->importer->parser->parse($source, $result);

  if ($source->id == 'category_importer') {
		// Get existing list of product attribures.
		$existing_pas = array();
		$vocs= taxonomy_get_vocabularies();
		foreach($vocs as $voc) {
			$existing_pas[] = trim($voc->name);
		}

		$field = ltv_migration_getfield();
		$instance = ltv_migration_getinstance();

		foreach($result->items as $key => $row) {
			$product_category = $row['productcategory'];
			foreach($row as $k => $attribute) {
				if ($k != 'productcategory' && !empty($attribute)) {
					$importing_pa = trim($product_category) . '-' . trim($attribute);
					// Check product attribute already exist.
					if (!in_array($importing_pa, $existing_pas)) {
						// Create the product attribute.
						$machine_readable = strtolower($importing_pa);
						$machine_readable = preg_replace('@[^a-z0-9_]+@','_',$machine_readable);
						taxonomy_vocabulary_save((object) array(
							'name' => $importing_pa,
							'machine_name' => $machine_readable,
							'description' => t('Prodcut attribute used for !product_type.',array('!product_type' => trim($product_category))),
							'module' => 'taxonomy',
						));

						$vocabulary_id = db_query("SELECT vid FROM {taxonomy_vocabulary} where name =:name",array(":name" => $importing_pa))->fetchField();
						if ($vocabulary_id) {
							if (field_info_field('field_product_attr' . $vocabulary_id) == NULL) {
								// Add field to product type.
								$field['settings']['allowed_values'][0]['vocabulary'] = $machine_readable;
								$field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] = array(
									'field_data_field_product_attr' . $vocabulary_id => array(
										'tid' => 'field_product_attr'. $vocabulary_id .'_tid',
									),
								);
								$field['storage']['details']['sql']['FIELD_LOAD_REVISION'] = array(
									'field_revision_field_product_attr' . $vocabulary_id => array(
										'tid' => 'field_product_attr'. $vocabulary_id .'_tid',
									),
								);
								$field['field_name'] = 'field_product_attr' . $vocabulary_id;
								field_create_field($field);
							}
							// Add Instance now.
							$instance['label'] = $importing_pa;
							$instance['widget']['weight'] = $vocabulary_id;
							$instance['commerce_cart_settings']['attribute_widget_title'] = $importing_pa;
							$instance['field_name'] = 'field_product_attr' . $vocabulary_id;
							field_create_instance($instance);

							// Add to field field group group_product_attributes.
							$groups = field_group_read_groups(array(
							'name' => ' group_product_attributes',
							'bundle' => 'product',
							'view_mode' => 'form'));
							$group_product_attributes = $groups['commerce_product']['product']['form']['group_product_attributes'];
							$group_product_attributes->children[] = 'field_product_attr' . $vocabulary_id;
							field_group_group_save($group_product_attributes);
						}
					}
				}
			}
		}
	}
}

/**
* Implements hook_feeds_after_parse()
*
* Adds a key "fullname" to each result
* @param $source
*  FeedsSource object that describes the source that has been imported.
* @param $result
*   FeedsParserResult object that has been parsed from the source.
*/
function ltv_migration_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
	if ($source->id == 'product_display_importer') {
		foreach($result->items as $key => $row) {
			$product_attr = array();
			foreach($row as $k => $value) {
				$value = trim($value);
				$k = trim($k);
				if (($k != 'productdisplaytitle' && $k != 'productdisplaydesc') && !empty($value)) {
					$product_attr[] = $k . ';' . trim($value);
				}
			}
			$result->items[$key]['producttitle'] = implode('|', $product_attr);
		}
	}

	if ($source->id == 'category_importer') {
		foreach($result->items as $key => $row) {
			$product_category = $row['productcategory'];
			foreach($row as $k => $v) {
				if ($k != 'productcategory' && !empty($v)) {
					if (is_array($v) && key($v) == 'attribute1') {
						$result->items[$key]['attribute1'][0] = trim($product_category) . '-' . trim($v[0]);
					}
					else {
						$result->items[$key]['attribute1'][] = trim($product_category) . '-' . trim($v);
					}
				}
			}
		}
	}
}

function ltv_migration_getfield() {
	return array(
  'translatable' => '0',
  'entity_types' => array(),
  'settings' => array(
    'allowed_values' => array(
      array(
        'vocabulary' => 'appliances_brand',
        'parent' => '0',
      ),
    ),
  ),
  'storage' => array(
    'type' => 'field_sql_storage',
    'settings' => array(),
    'module' => 'field_sql_storage',
    'active' => '1',
    'details' => array(
      'sql' => array(
        'FIELD_LOAD_CURRENT' => array(
          'field_data_field_product_taxo15' => array(
            'tid' => 'field_product_taxo15_tid',
          ),
        ),
        'FIELD_LOAD_REVISION' => array(
          'field_revision_field_product_taxo15' => array(
            'tid' => 'field_product_taxo15_tid',
          ),
        ),
      ),
    ),
  ),
  'foreign keys' => array(
    'tid' => array(
      'table' => 'taxonomy_term_data',
      'columns' => array(
        'tid' => 'tid',
      ),
    ),
  ),
  'indexes' => array(
    'tid' => array(
      'tid',
    ),
  ),
  'field_name' => 'field_product_taxo15',
  'type' => 'taxonomy_term_reference',
  'module' => 'taxonomy',
  'active' => '1',
  'locked' => '0',
  'cardinality' => '1',
  'deleted' => '0',
  'columns' => array(
    'tid' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
  ),
  'bundles' => array(
    'commerce_product' => array(
      'product',
    ),
  ),
	);
}

function ltv_migration_getinstance() {
	return array(
  'label' => 'Appliances-Brand',
  'widget' => array(
    'weight' => '36',
    'type' => 'options_select',
    'module' => 'options',
    'active' => 1,
    'settings' => array(),
  ),
  'settings' => array(
    'user_register_form' => FALSE,
  ),
  'display' => array(
    'default' => array(
      'label' => 'above',
      'type' => 'taxonomy_term_reference_link',
      'settings' => array(),
      'module' => 'taxonomy',
      'weight' => 1,
    ),
    'line_item' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'node_teaser' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
  ),
  'required' => 0,
  'description' => '',
  'commerce_cart_settings' => array(
    'attribute_field' => 0,
    'attribute_widget' => 'select',
    'attribute_widget_title' => 'Appliances-Brand',
  ),
  'default_value' => NULL,
  'field_name' => 'field_product_taxo15',
  'entity_type' => 'commerce_product',
  'bundle' => 'product',
  'deleted' => '0',
	);
}

function ltv_migration_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'importer_node_form') {
		$form['feeds']['FeedsCSVParser']['#access'] = FALSE;
		$form['feeds']['#title'] = 'Upload CSV file';
		$form['feeds']['FeedsFileFetcher']['upload']['#title'] = 'Previous Upload CSV file';
		//Kept in fieldset.
		$form['fieldset_product_attr'] = array(
			'#type' => 'fieldset',
			'#title' => t('CSV upload template'),
			'#attributes' => array('id' => array('fieldset_product_attr_id'), 'style' => 'display:none',),
			'#weight' => $form['field_product_category']['#weight'] + 1,
		);
    $attributes = array();
		// Get Select Category.
		if (isset($form_state['values']['field_product_category'][LANGUAGE_NONE][0]['tid'])) {
			$category_id = $form_state['values']['field_product_category'][LANGUAGE_NONE][0]['tid'];
			$form['fieldset_product_attr']['#attributes'] = array('id' => array('fieldset_product_attr_id'),);
			$category = taxonomy_term_load($category_id);
			$category_name_count = strlen($category->name) + 1;
			// Find the list of attributes to display.
			foreach($category->field_taxo_attributes[LANGUAGE_NONE] as $term) {
				$attributes[$term['target_id']] = $term['target_id'];
			}
			$csv_array[0] = array('ProductDisplayTitle', 'ProductDisplayDesc', 'ProductTitle', 'ProductSKU', 'Price', 'Category',);
			foreach(taxonomy_vocabulary_load_multiple($attributes) as $attribute) {
				$csv_array[0][] = substr($attribute->name,$category_name_count);
			}
			//Create CSV file and save to location.
			$file_dir = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath() . '/product-import/' . $category->name;
			if (file_prepare_directory($file_dir, FILE_CREATE_DIRECTORY)) {
				file_prepare_directory($file_dir, FILE_MODIFY_PERMISSIONS);
				$CSVFileName = $file_dir . '/' . preg_replace('@[^a-z0-9_]+@','_', strtolower($category->name)) . '_template' . '.csv';
				$fp = fopen($CSVFileName, 'w');
				foreach ($csv_array as $fields) {
					fputcsv($fp, $fields);
				}
				fclose($fp);
				$form['fieldset_product_attr']['csv_template'] = array(
					'#markup' => '<div class="csv-template">Dowload the sample template file. ' .  l(t('Sample Template'), $CSVFileName, array('attributes' => array('title' => 'Click here to download'))),
				);
			}
			else {
				drupal_set_message(t("Directory may not exists or not is writable"));
			}

		}

		$form['field_product_category']['und']['#ajax'] = array(
			'callback' => 'ltv_migration_ajax_callback',
			'wrapper' => 'fieldset_product_attr_id',
		);

	}



	if ($form_id == 'product_display_node_form') {
		// Get edited form.
		$form_array = array();
		foreach($form['field_product']['und']['entities'] as $key => $value) {
			if (is_array($value) && isset($value['form'])) {
				$categories = $form['field_product']['und']['entities'][$key]['form']['field_product_category']['und']['#options'];
				$fhsname = 'field_product['. $form['field_product']['#language'] .'][entities]['. $key .'][form][field_product_category]['. $form['field_product']['und']['entities'][$key]['form']['field_product_category']['#language'] .']';
				$form['field_product']['und']['entities'][$key]['form'] = ltv_migration_addcondition($form['field_product']['und']['entities'][$key]['form'], $categories, $fhsname);
			}
		}
		// New product Add form.
		if (isset($form['field_product'][LANGUAGE_NONE]['form'])) {
			$categories = $form['field_product'][LANGUAGE_NONE]['form']['field_product_category']['und']['#options'];
			$fhsname = 'field_product[' . $form['field_product']['#language'] . '][form][field_product_category][' . $form['field_product'][LANGUAGE_NONE]['form']['field_product_category']['#language'] . ']';
			$form['field_product'][LANGUAGE_NONE]['form'] = ltv_migration_addcondition($form['field_product'][LANGUAGE_NONE]['form'], $categories, $fhsname);
		}
		$form['#validate'][] = 'ltv_migration_product_form_validate';
	}

	if ($form_id == 'commerce_product_ui_product_form') {
		$categories = $form['field_product_category']['und']['#options'];
		$fhsname = 'field_product_category['. $form['field_product_category']['#language'] .']';
		$form = ltv_migration_addcondition($form, $categories, $fhsname);
		$form['#validate'][] = 'ltv_migration_product_form_validate';
	}
}

function ltv_migration_addcondition($form, $categories, $fhsname) {
	foreach($categories as $key => $value) {
		if ($category = taxonomy_term_load($key)) {
			foreach($category->field_taxo_attributes[LANGUAGE_NONE] as $term) {
				//$attributes[$term['target_id']] = $term['target_id'];
				if (isset($form['field_product_attr' . $term['target_id']])) {
					$form['field_product_attr' . $term['target_id']]['#states'] = array(
						'visible' => array(
							':input[name="'. $fhsname .'"]' => array('value' => trim($key)),
						),
					);
				}
			}
		}
	}

	return $form;
}

function ltv_migration_dependency_validation($form_state) {
	$category_id = $form_state['field_product_category'][LANGUAGE_NONE][0]['tid'];
	$attributes = array();
	if ($category = taxonomy_term_load($category_id)) {
		foreach($category->field_taxo_attributes[LANGUAGE_NONE] as $term) {
			$attributes[$term['target_id']] = $term['target_id'];
		}
	}

	foreach($form_state as $key => $value) {
		if (substr($key,0,18) == 'field_product_attr') {
			if (!in_array(substr($key,18), $attributes)) {
				$form_state[$key][LANGUAGE_NONE][0]['tid'] = NULL;
			}
		}
	}

	dsm($form_state);
	return $form_state;
}

function ltv_migration_product_form_validate($form, &$form_state) {
  if ($form['#form_id'] == 'commerce_product_ui_product_form') {
		$form_state['values'] = ltv_migration_dependency_validation($form_state['values']);
	}

	if ($form['#form_id']  == 'product_display_node_form') {
		// Get edited form.
		$form_array = array();
		foreach($form['field_product']['und']['entities'] as $key => $value) {
			if (is_array($value) && isset($value['form'])) {
				$form_state['values']['field_product']['und']['entities'][$key]['form'] = ltv_migration_dependency_validation($form_state['values']['field_product']['und']['entities'][$key]['form']);
			}
		}
		// New product Add form.
		if (isset($form['field_product'][LANGUAGE_NONE]['form'])) {
			$form_state['values']['field_product'][LANGUAGE_NONE]['form'] = ltv_migration_dependency_validation($form_state['values']['field_product'][LANGUAGE_NONE]['form']);
		}
	}
}

function ltv_migration_product_display_form_validate($form, &$form_state) {

}


/**
 * Implements hook_element_info_alter().
 */
function ltv_migration_element_info_alter(&$elements) {
  foreach ($elements as &$element) {
    // Replace #pre_render function.
    if (!empty($element['#pre_render']) && ($key = array_search('form_pre_render_fieldset', $element['#pre_render'])) !== FALSE) {
      $element['#pre_render'][$key] = '_ltv_migration_form_html_cleanup';
    }
  }
}

function _ltv_migration_form_html_cleanup($element) {
	if (in_array('fieldset_product_attr',$element['#parents'], TRUE)) {
		$element['#id'] = 'fieldset_product_attr_id';
	}
	return $element;
}

function ltv_migration_ajax_callback($form, $form_state) {
	return $form['fieldset_product_attr'];
}
function ltv_migration_ajax_callback2($form, $form_state) {
	return $form['field_product'][LANGUAGE_NONE]['form']['fieldset_product_attr'];
}

//$groups = field_group_read_groups(array(
//    'name' => ' group_product_attributes',
//    'bundle' => 'product',
//    'view_mode' => 'form'));
//dsm($groups);
//  $group_product_attributes = $groups['commerce_product']['product']['form']['group_product_attributes'];
//  $group_product_attributes->children[] = 'field_product_attr51';
//  field_group_group_save($group_product_attributes);
