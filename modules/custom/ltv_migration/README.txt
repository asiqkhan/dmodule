-- INSTALLATION --

  Install module like normal

-- CONFIGURATION --

<?php
/**
 * @file
 * Custom tokens for Metatag.
 */

/**
 * Implements hook_token_info().
 */
function metatag_token_info() {
  $info = array();

  $info['types']['metatag'] = array(
    'name' => t('Meta tags'),
    'description' => t('Generated by the Metatag module, may not be used to fill in other meta tags.'),
  );

  $metatag_info = metatag_get_info();

  foreach($metatag_info['tags'] as $value) {
    $info['tokens']['metatag'][$value['name']] = array(
      'name' => $value['label'],
      'description' => $value['description']
    );
  }

  if (module_exists('taxonomy')) {
    $info['tokens']['term']['metatag'] = array(
      'name' => t('Metatag.'),
      'description' => t('Metatag.'),
      'type' => 'metatag'
    );
  }

  if (module_exists('node')) {
    $info['tokens']['node']['metatag'] = array(
      'name' => t('Metatag.'),
      'description' => t('Metatag.'),
      'type' => 'metatag'
    );
  }

  return $info;
}

/**
 * Implements hook_tokens().
 */
function metatag_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  $sanitize = !empty($options['sanitize']);

  // Metatag tokens.
  if ($type == 'metatag' && !empty($data['metatag'])) {
    $metatag = $data['metatag'];
    foreach ($tokens as $name => $original) {
      if(isset($metatag[$name])){
        $replacements[$original] = $sanitize ? filter_xss($metatag[$name]) : $metatag[$name];
      }
    }
  }

  // Token tokens.
  if ($type == 'term' && !empty($data['term'])) {
    $term = $data['term'];

    if ($metatag_tokens = token_find_with_prefix($tokens, 'metatag')) {
      $result = metatag_token_generate_array($term, 'taxonomy_term', $term->vocabulary_machine_name);
      $replacements += token_generate('metatag', $metatag_tokens, array('metatag' => $result), $options);
    }
  }

  // Node tokens.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    if ($metatag_tokens = token_find_with_prefix($tokens, 'metatag')) {
      $result = metatag_token_generate_array($node, 'node', $node->type, $metatag_tokens);
      $replacements += token_generate('metatag', $metatag_tokens, array('metatag' => $result), $options);
    }
  }

  return $replacements;
}

/**
 * Generate an array of meta tags for a given entity.
 */
function metatag_token_generate_array($entity, $entity_type, $bundle, $metatag_tokens) {
  if (metatag_entity_supports_metatags($entity_type, $bundle)) {
    $token_type = token_get_entity_mapping('entity', $entity_type);

    $instance = "{$entity_type}:{$bundle}";
    $options = array();
    $options['token data'][$token_type] = $entity;
    $options['entity'] = $entity;

    $metatags = array();
    if (!empty($entity->metatags)) {
      $language = metatag_entity_get_language($entity_type, $entity);
      if (!empty($entity->metatags[$language])) {
        $metatags = $entity->metatags[$language];
      }
    }
     dsm($metatag_tokens);
    $metatags += metatag_config_load_with_defaults($instance);

    dsm($metatags);
    // Loop through metatags to replace node metatag token
    // to it's actual node field token.
    foreach ($metatags as $metatag => $data) {
      // Explode for node metatag tokens.
      preg_match_all("^\[(.*?)\]^",$data['value'],$data_tokens, PREG_PATTERN_ORDER);
      if (!empty($data_tokens[1]) && is_array($data_tokens[1])) {
        // Loop through each token present in field.
        foreach($data_tokens[1] as $key => $value) {
          $metatag_parts = explode(':', $value);
          // Check node metatag token.
          if ($metatag_parts[0] == 'node' && $metatag_parts[1] == 'metatag') {
            unset($metatag_parts[0]); unset($metatag_parts[1]);
            $metatag_field = implode(':', $metatag_parts);
            dsm($data['value'] . '-' . $metatag_field);
            dsm($metatags[$metatag_field]['value']);
            // Field value $metatags[$metatag_field]['value'] Which may contain
            // other node metatag token that need to replace also.
            $metatag_rep_value = metatag_token_replace_nodemetatag_token($metatags, $metatags[$metatag_field]['value']);
            $metatags[$metatag]['value'] = str_replace($data_tokens[0][$key], $metatag_rep_value, $metatags[$metatag]['value']);
          }
        }
      }
    }

    $result = array();
    dsm($metatags);
    foreach ($metatags as $metatag => $data) {
      if ($metatag_instance = metatag_get_instance($metatag, $data)) {
        //$result[$metatag] = $metatag_instance->getValue($options);
      }
    }
    return $result;
  }

  return NULL;
}

function metatag_token_replace_nodemetatag_token($metatags, $token) {
  dsm('loop -' . $token);
  $metatag_rep_value = '';
  preg_match_all("^\[(.*?)\]^",$token,$data_tokens, PREG_PATTERN_ORDER);
  // Check Field has tokens.
  if (!empty($data_tokens[1]) && is_array($data_tokens[1])) {
    // Go through each token and find node metatag tokens.
    foreach($data_tokens[1] as $key => $value) {
      $metatag_parts = explode(':', $value);
      if ($metatag_parts[0] == 'node' && $metatag_parts[1] == 'metatag') {
        unset($metatag_parts[0]); unset($metatag_parts[1]);
        // Metatag field.
        $metatag_field = implode(':', $metatag_parts);
        $metatag_rep = metatag_token_replace_nodemetatag_token($metatags, $metatags[$metatag_field]['value']);
        $metatag_rep_replace[] = $metatag_rep;
      }
      else {
        $metatag_rep_replace[] = $data_tokens[0][$key];
      }
      $metatag_rep_search[] = $data_tokens[0][$key];
    }
    $metatag_rep_value .= str_replace($metatag_rep_search, $metatag_rep_replace, $token);
    
    return $metatag_rep_value;
  }
  else {
    // No tokens returns string.
    return $token;
  }
}
