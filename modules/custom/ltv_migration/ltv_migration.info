name = LTV Migration
description = "LTV Shows Migration"
package = Lifetime
core = 7.x

------------------metatag.token.inc----------
/**
 * Loop through metatags to replace node-metatag-token
 * to it's actual node field value to avoid recursion.
 */
function metatag_token_process_nodemetatag($metatags, $token_type) {
  foreach ($metatags as $metatag => $data) {
    // Explode all metatag in field.
    preg_match_all("^\[(.*?)\]^", $data['value'], $data_tokens, PREG_PATTERN_ORDER);
    if (!empty($data_tokens[1]) && is_array($data_tokens[1])) {
      foreach($data_tokens[1] as $key => $value) {
        $metatag_parts = explode(':', $value);
        // Check node-metatag-token. Like [node:metatag:<xyz>].
        if ($metatag_parts[0] == $token_type && $metatag_parts[1] == 'metatag') {
          unset($metatag_parts[0]);
          unset($metatag_parts[1]);
          $entity_field = implode(':', $metatag_parts);
          // Node metatag field may contain other node-metatag-token
          // that need to be replace too.
          $recursion[$entity_field] = array($entity_field);
          $metatag_rep_value = metatag_token_nodemetatag_replace($metatags, $metatags[$entity_field]['value'], $token_type, $recursion);
          $metatags[$metatag]['value'] = str_replace($data_tokens[0][$key], $metatag_rep_value, $metatags[$metatag]['value']);
        }
      }
    }
  }

  return $metatags;
}

// Process it for node metatag replacement to avoid infinite recursion.
    $metatags = metatag_token_process_nodemetatag($metatags, $token_type);
    
  ---------------------metatag.module------------
  /**
 * Replace node-metatag-token with actual node metatag field value.
 *
 * @param array $metatags
 *   A list node metatag tokens.
 * @param string $token
 *   A token need to be search and replace.
 * @param string $token_type
 *   Entity token type.
 * @param array $recursion
 *   A list of processed node metadata fields.
 *   To kept the track of fields replaced to avoid recursion.
 * @param array $replace_tokens
 *   A list of tokens need to replace.
 * @param array $search_tokens
 *   A list of token searched.
 *
 * @return string
 *   The replaced value of token.
 */
function metatag_token_nodemetatag_replace($metatags, $token, $token_type, $recursion, $replace_tokens = array(), $search_tokens = array()) {
  $metatag_rep_value = '';
  preg_match_all("^\[(.*?)\]^",$token,$data_tokens, PREG_PATTERN_ORDER);
  // Check field has tokens.
  if (!empty($data_tokens[1]) && is_array($data_tokens[1])) {
    // Go through each token in field and find node-metatag-tokens.
    foreach($data_tokens[1] as $key => $value) {
      $metatag_parts = explode(':', $value);
      if ($metatag_parts[0] == $token_type && $metatag_parts[1] == 'metatag'
        && !in_array($data_tokens[0][$key], $search_tokens)
      ) {
        unset($metatag_parts[0]);
        unset($metatag_parts[1]);
        // Node metatag field value.
        $entity_field = implode(':', $metatag_parts);
        // Check for recursion.
        if (isset($recursion[$entity_field])) {
          // Set token value to blank if recursion found.
          $metatag_rep = '';
        }
        else {
          $recursion[$entity_field] = array($entity_field);
          $metatag_rep = metatag_token_nodemetatag_replace($metatags, $metatags[$entity_field]['value'], $token_type, $recursion, $replace_tokens, $search_tokens);
        }
        $replace_tokens[] = $metatag_rep;
        $search_tokens[] = $data_tokens[0][$key];
      }
    }
    $metatag_rep_value .= str_replace($search_tokens, $replace_tokens, $token);

    return $metatag_rep_value;
  }
  else {
    return $token;
  }
}

============================== token_filter.module

function _token_filter_filter_tokens($text, $filter, $format, $langcode, $cache, $cache_id) {
  $data = array();
  $options = array();
  $token_type = '';
  $entity_type = '';
  $bundle = '';
  // Attempt to fetch the entity that is being viewed via a backtrace to the
  // field_attach_view($entity_type, $entity) function and parameters Â§if found.
  $backtrace = debug_backtrace();
  foreach ($backtrace as $caller) {
    if ($caller['function'] == 'field_attach_view') {
      $entity_type = $caller['args'][0];
      $entity = $caller['args'][1];
      $token_type = token_get_entity_mapping('entity', $entity_type);
      $bundle = $entity->type;
      $data[$token_type] = $entity;
      // Use the proper language code that field_attach_view was called with.
      if ($langcode = $caller['args'][3]) {
        $language_list = language_list();
        if (!empty($language_list[$langcode])) {
          $options['language'] = $language_list[$langcode];
        }
      }
      break;
    }
    // For taxonomy_term.
    elseif ($caller['function'] == 'taxonomy_term_page') {
      $entity = $caller['args'][0];
      $token_type = 'term';
      $data[$token_type] = $entity;
      $bundle = $entity->vocabulary_machine_name;
      break;
    }
    // For metatags.
    elseif ($caller['function'] == 'metatag_generate_entity_metatags') {
      $entity_type = $caller['args'][1];
      $entity = $caller['args'][0];
      $token_type = token_get_entity_mapping('entity', $entity_type);
      $data[$token_type] = $entity;
      // @todo Need to find $bundle in better way.
      if ($entity_type == 'taxonomy_term') {
        $bundle = $entity->vocabulary_machine_name;
      }
      else {
        $bundle = $entity->type;
      }
      if ($langcode = $caller['args'][2]) {
        $language_list = language_list();
        if (!empty($language_list[$langcode])) {
          $options['language'] = $language_list[$langcode];
        }
      }
      break;
    }
    elseif ($caller['function'] == '_drupal_bootstrap_full' || $caller == 'menu_execute_active_handler') {
      // There is no point in going back this far, so just stop.
      break;
    }
  }
  // For entitymetatagtokens, to avoid infinite loop.
  // https://www.drupal.org/node/2198669#comment-9316529.
  $text_tokens = token_scan($text);
  if (isset($text_tokens[$token_type])) {
    $metatags = $metatag_rep_search = $metatag_rep_replace = array();
    foreach ($text_tokens[$token_type] as $key => $tokens) {
      $entity = $data[$token_type];
      $instance = "{$entity_type}:{$bundle}";
      if (!empty($entity->metatags)) {
        $language = metatag_entity_get_language('node', $entity);
        if (!empty($entity->metatags[$language])) {
          $metatags = $entity->metatags[$language];
        }
      }
      $metatags += metatag_config_load_with_defaults($instance);
      // Check node-metatag-token. Like [node:metatag:<xyz>].
      $metatag_parts = explode(':', $tokens);
      if ($metatag_parts[1] == 'metatag') {
        $metatag_rep_search[] = $tokens;
        $metatag_rep_replace[] = metatag_token_entitymetatagtoken_replace($metatags, $tokens, $token_type);
      }
    }
    $text = str_replace($metatag_rep_search, $metatag_rep_replace, $text);
  }

  return token_replace($text, $data, $options);
}
